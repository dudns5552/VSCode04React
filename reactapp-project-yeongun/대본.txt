안녕하세요 (인사) 2차 프로젝트 발표를 시작하겠습니다.
먼저 앱을 보여드리겠습니다

전역적으로 상태관리를 하기위해 
콘텍스트를 만들어 감쌌는데요 하다보니 제가 사용법을 잘 모르겠어서
그냥 진행했습니다.
그리고 전체적인 구조는 탑내비와 푸터가 전역을 감싸고
그 안에 바디라고 볼수있는 부분만 라우팅되도록 처리하였습니다.
그리고 메인페이지를 따로 만들어 전체적인 게시판들의 최신게시물 5개가
보이도록 처리하였습니다.
(홈페이지 보여준뒤 )

저는 루츠라는 폴더를 따로만들어 컴포넌트들을 관리하고
각 게시판 및 기능에 맞는 루츠를 앱에서 호출하여 함수처럼 호출하여
리턴하도록 만들었습니다.

각 루츠들은 이렇습니다. 특별한 기능은 없고 순수 컴포넌트들만 관리하였습니다.

메인 페이지에 대해 보겠습니다.


먼저 유즈이펙트로 처음 렌더링시 각 게시판의 이름과 게시물을 저장하기 
위한 상태훅 인수로 넣고
최신 게시물 가져오는 함수를 실행해 줍니다.
가장 최신 게시물은 파이어 베이스에
게시판이름으로된 컬렉션에 고유값을 가진 게시물들을 쿼리를 통해 
인덱스로 내림차순으로 정렬한뒤 다섯개를 가져옵니다.
그뒤 맵함수를 사용하여 각 게시물의 데이터를 포스츠라는 인수에 넣고
세터함수의 인자로 사용해줍니다.

그뒤 리턴절에서
상태인자를 풀어서 각 부분에 삽입해줍니다.
각 태그의 키값은 인덱스로 주었고
타이틀 클릭시 해당 게시물로 이동하도록 링크태그를 걸어줬습니다.

그리고 자료게시판의 경우 자료의 유무에 따라 다르지만
자료가 있을경우 해당 게시물의 첫번째자료가 출력되도록 처리하였습니다.


푸터는 딱히 기능은 없이 모양새만 잡아놨구요
탑 내비의 경우 내가 지금있는 페이지의 버튼이 하얗게 되도록 해주었습니다.
제가 한건 아니구요 gpt가 해줬습니다.
근데 채팅도 분명 같은 클래스명을 썼는데 저건 안바뀌더라구요

이제 회원관련된 컴포넌트들로 넘어가겠습니다.

먼저 회원가입을 보여드리겠습니다.
각 입력창은 비어있는상태로 전송되지 않도록 리콰이어드와 조건문으로 막아두었습니다.
아이디 입력 및 중복확인입니다.
아이디 중복확인이 수행되지 않았을시 전송이 안되도록 설정해 놓았구요
중복확인이 되면 경고창이 뜨면서 중복아이디임을 알리고
중복이 아니면 아이디창을 리드온리의 값이 트루가 되도록 설정해놓았습니다.
아이디의 중복확인 로직은 쿼리로 아이디 입력창에서 받은 아이디와 같은 문서를
인출한후 그 인출된 데이터가 있으면 중복 그렇지 않으면 중복이 아닌것으로 처리했습니다.
비밀번호확인은 두 비밀번호가 일치하지 않으면 전송되지 않도록 조건문을 설정해놨습니다.

이메일의 도메인 셀렉부분은 선택되는 순간 그 도메인으로 잠기게 설정해놨고
직접입력이되면 리드온리의 값이 널이돼서 다시 입력이 가능하도록 설정해놨습니다.

휴대전화번호 입력창은 각 창에 온체인지 함수에
조건문으로 포커스이동을 걸어놔서 포커스 이동을 햇습니다
주소입력창의 첫번째, 두번째 입력창은 주소찾기 api로만 입력이 되도록
미리 리드온리를 걸어놨고
사용자는 상세주소만 입력이 가능하도록 설정해놨습니다.

회원가입을 누르면 각정보들을 구조분해 할당을 통해 각데이터 값을 받고
데이터 값이 비어있진 않은지
그리고 각 단계에서 요구하는 데이터의 조건에 맞는지 확인후
데이터 입력함수로 넘어갑니다.
데이터 입력함수에선 파이어베이스와 통신하여 각 데이터 값을 넣고 객체를 저장합니다.
저는 이메일과 전화번호
주소를 객체로 저장하였는데요
각 데이터는 하나일때 유의미해서 구조를 합쳐서 저장하는게 맞지않나 하겠지만
회원정보 수정페이지에서 각 데이터를 다시 쪼개야되는 과정이 생기기 때문에
객체로 나눠 저장해놨습니다.

입력된 데이터는 파이어스토어에
멤버스라는 컬렉션에 입력받은 아이디를 문서의 아이디로 사용하여 저장되는데
방금 입력된 회원정보도 잘 저장된것을 알수 있습니다.

이어서 로그인을 해보겠습니다.
아이디/비밀번호 찾기는 안되고요 로그인 회원가입기능합니다

로그인은 먼저 로그인페이지로 넘어오면 회원 정보를 불러와 쇼데이타에 배열로
저장합니다. 그후 아이디와 비밀번호 입력하고 로그인 버튼을 누르면
아이디와 비밀번호가 일치하는 데이타가있으면
그 데이터의 아이디와 이름을 값으로 갖는 이즈로긴드라는 세션스토리지를 생성합니다.
그후 세션스토리지 생성을 인식하기위한 렌더링함수를 실행해준뒤 홈으로
이동합니다.

만약 아이디와 비밀번호가 틀리면
ok라는 불리언 변수가 팔스가 되어 경고창을 띄우게 되고 비밀번호 창을 지웁니다.

로그인에 성공하게되면 홈화면으로 이동하게되고 탑내비가 로그인된 형태로 토글됩니다.
원래 회원가입과 로그인이 있던자리가 마이페이지와 로그아웃이 되고
땡땡님 환영합니다라는 글귀가 작성되게됩니다.

잠시 탑내비 토글에 관한로직을 보자면 탑내비는 이즈로긴드를 항상 감지해서
그 값이 있을경우는 로그인상태로 보고 로그아웃과 마이페이지를
그 값이 없을경우에는 회원가입과 로그인이 뜨도록 설정하였습니다.
로그아웃은 클릭시 세션스토리지를 삭제하고 감지할수 있도록
렌더링함수를 실행하도록 설정하였습니다.
이어서 마이페이지는
아이디중복확인을 없에고 아이디는 수정이 불가능하도록 설정하였고
그 외 이메일 셀렉트가 사라진것 말고는 회원가입의 폼을 그대로 가져다 썼습니다.
대신 비밀번호의 확인창을 비워 비밀번호를 모르거나 아니면 새로운 비밀번호를
설정하더라도 서로 안맞으면 전송이되지않도록 하였습니다.

함수나 로직들은 거의 회원가입이랑 비슷하고
업데이트로 바뀐것말고는 똑같습니다.
수정도 잘 되는것을 볼수 있습니다.

이어서 게시판을 보도록 하겠습니다.
각게시판의 전체적인 틀은
자유게시판의 틀에서 크게 벗어나지 않고
댓글이나 자료만 추가해서 보여주는 형태로 구현했습니다.

먼저 게시글 목록에 대해서 설명하겠습니다. 페이지에 진입시
유즈이펙트를 사용하여
파이어 스토어에서 게시판이름으로된 컬렉션의 문서들을
인덱스내림차순으로 정렬한뒤 100개를 가져오도록 합니다.

그리고 각 게시물들을 각게시물의 데이터들을 티디에 넣습니다.
넣을때 각게시물은 데이터를 보존한상태로 들어가지만 날짜의경우
데이트객체의 함수로 현재날짜를 가져와서
게시글들의 날짜와 비교한뒤 
날짜가 같으면 시간을 다르면 날짜를 출력하도록 설정하여줍니다.

그리고 반환된 게시물배열을 20개씩 끊어 페이지데이타에 배열로
저장합니다. 그리고
데이터세이브에 저장해줍니다.

그뒤 또다른 유즈이펙트에서
주소에서 값을 받아와 페이지를 감지한뒤 페이지에 맞는 인덱스데이터세이브를
리스트데이터에 저장해줍니다.

그 뒤 리턴절에서
리스트데이터를 출력해줍니다.

페이징처리는 데이터세이브의 맵함수를 사용하고 첫번째 매개변수를 쓰지않고
인덱스만 사용하여 데이터세이브의 인덱스만큼만 페이지가
나오도록 페이징처리를 하였습니다.






이어서 글쓰기 부분에 대해 말씀드리도록하겠습니다.
글쓰기는 로그인된 상태에서만 접근되도록, 세션스토리지를 감지하여 널이 아닌경우에만
가능하도록 설정하였습니다.
글쓰기는 전역변수로 id를 사용하도록 선언했고
컬렉션명은 히든인풋으로 설정하고
제목과 내용만 작성이 가능 하 도록 설정했습니다. 글쓰기 버튼 클릭시
파이어스토어에 접근해
인덱스가 가장큰 게시물 하나만 얻어온뒤 인덱스에 1을 더해 인덱스를 구하고
날짜는 데이트 객체의 함수들로 얻어왔습니다.
그렇게
인덱스 제목 글쓴이 날짜 내용을 객체화한후
데이터를 저장하도록 구현하였습니다.



보시면 게시물이 잘 등록된것을 볼수 있습니다.
상세보기는 자신이 작성한 게시물이면 수정과 삭제가 보이도록 설정하였습니다.

이전글과 다음글은 밑이라 잘 안보이실 수도 있는데 이전글이나 다음글이 존재할때만
보이도록 토글되게 만들어 놨습니다. 

코드를 보자면
먼저 상세보기 페이지 진입시
주소에서 게시글의 인덱스를 얻어와
인덱스에 맞는 게시글을 파이어스토어에서 불러옵니다.
그뒤 뷰데이터에 저장한뒤 리턴절에서 출력해줍니다.

이전글과 다음글은 마찬가지로 페이지 진입시
알아낸 게시글의 인덱스로 쿼리를 진행합니다.
인덱스보다 큰값 작은값을 하나씩 인출하여
각 기능을 위한 스테이트에 설정해주고
클릭시 해당 인덱스를 주소값으로 이동하는 것으로
 구현하였습니다.
그리고 이전글 다음글이 존재하지 않으면
인덱스에 값이 존재하지 않을테니 그 유무로
삼항연산자로 기능이 토글되도록 구현하였습니다.
삭제는 삭제버튼을 누를경우
파어이베이스에 인덱스가 같은 문서의 아이디를 얻어와
그 문서를 삭제하는것으로  구현하였습빈다.


이어서 수정은 먼저 파이어스토어에서 게시글의 데이터를 불러온뒤
상태훅에 저장해 줍니다 이때
저장해줄 값은 제목과 내용 그리고 문서의 참조값인데요
참조값을 상태훅에 저장하는 이유는 게시물 수정을 완료하고 파이어스토어에
업데이트를 할때 상태훅을 경로로 설정하면 편하기때문에 설정하였습니다.
수정은 쓰기와 다른점이 함수밖에 없어서 이정도 하고 넘어가도록 하겠습니다.

이어서 큐엔에이 게시판에 대해 보겠습니다.
코드자체는 자유게시판과 동일하여 바로 댓글기능만 보도록 하겠습니다.

먼저 게시글 상세보기로 진입시 상세보기컴포넌트 하단에 댓글 컴포넌트를 
상세보기의 하위컴포넌트로 추가하여
댓글이 렌더링 되도록 구현하였고 각각 게시글의 인덱스와
문서의 참조, 댓글이 입력 삭제 등이 일어날때 렌더링이 일어나도록
상태훅을 프롭스로 전달하였습니다.


댓글은 쓰기와 목록 두가지 파일로 나눠서 구현하였고 
먼저 쓰기부분을 보도록 하겠습니다.
댓글쓰기는 모달로 구현하였고
작성은 로그인한 상태에서만 전송되도록 설정해놨습니다.
댓글도 게시글과 같은원리로 인덱스와 날짜를 얻어온후
인덱스 날짜 글쓴이 내용을 저장하도록 설계하였습니다.

저장과정은
상세보기에서 프롭스로 전달된 문서의 참조값을 삽입하여 그 밑에
코멘츠라는 서브컬렉션을 삽입하고 댓글의 문서를 만들어 데이터를
넣도록 하였습니다. 댓글이 삽입된후로는
부모컴포넌트에 리렌더링을 유도해 댓글이 갱신이 되도록 설정하였습니다.

이제 댓글목록에 대해 보겠습니다.
먼저 댓글목록은 부모컴포넌트로 받은 문서의 참조값으로 쿼리를 작성한후
인덱스내림차순으로 정렬하여 댓글들을 꺼낸후
날짜가 오늘이면 시간을 아니면 날짜를 보이도록 설정하였습니다.

게시글목록의 페이지와 같이 페이징 처리도 해주었습니다.
수정부분을  보겠습니다. 수정부분은 모달창에서 내용이 수정된것을 받은후
업데이트로 내용만 수정된후 모달창을 닫도록 구현하였습니다.
삭제는 게시글과 같이 해당 댓글의 참조값을 쿼리해 삭제하도록 설정하였습니다.




다음으로 자료게시판을 보겠습니다
자료게시판의 목록부분은 다른 게시판과 동일하게 제작하였습니다.
작성부분을 보겠습니다. 

자료를 선택시
각각 미리보기배열과 데이터저장배열에 저장됩니다.
이어서 미리보기를 먼저 보여드리겠습니다.
미리보기는 배열을 맵함수로 푼뒤 각 파일의 확장자를 확인하여
이미지인지 아닌지 검사를 거쳐 이미지 일경우
이미지태그로 아닌경우  a태그로 감싸지도록 설정하였습니다.
미리보기에서 삭제시
미리보기의 배열과 데이터저장배열 둘다에서 삭제되어
업로드되지 않도록 하였습니다.

글쓰기를 누르게되면
데이터저장배열을 포오브문을 사용하여
스토리지에 파일이 저장할 경로를 게시물의 인덱스로 폴더를 만들어
그 하위에 저장되도록 설정하였습니다.
그리고 게시글의 데이터에 파일의 이름
다운로드URL, 경로를 삽입하여
게시글 상세보기 진입시 자료도 같이 출력할수 있도록 저장하였습니다.

읽기부분을 보겠습니다.
다른부분은 자유게시판과 같고
게시글의 데이터를 얻어온뒤
이미지면 이미지태그로 감싸고
아니면 a태그로 감싸 출력하도록 설정하였습니다.

사실 자료실게시판은 상세보기 쓰기 수정은 비슷하게 처리했습니다.
다만 삭제부분은 게시글의 삭제 뿐만아니라 스토리지에서도 삭제되도록
해당파일의 모든 파일들의 경로로 딜리트오브젝트메서드를 실행하도록
설계하엿습니다.

이어서 채팅에 대해서 보겠습니다.
저는 채팅은 총 파일 3개로 구현하였고 먼저 탑내비에서 채팅 클릭시
창이 열리며 채팅방 목록으로 진입하도록 설계하였습니다.
채팅방 목록으로 진입시 로그인 유무에 따라 대화명 정하기가 뜨고 안뜨고를
설정하였습니다.
대화명과 새채팅방 설정은 프롬프트창으로 입력을 받아 설정하도록 설정하였고
각 채팅방은 구역을 더블클릭하거나 입장하기를 클릭시 입장이 되도록 설정하였습니다.

각 채팅방의 이름과 마지막 메세지는
리얼타임 DB에 채팅룸컬럼의 방 이름을 얻오고
그리고 그 방의 마지막 메세지를 얻어온뒤 채팅방배열을
리턴절에서 맵함수로 출력하는것으로 구현하였습니다.

이어서 채팅방으로 들어가면
해당 채팅방의 이름으로 디비에 접근하여
채팅 내역들을 가져옵니다. 그리고
시간순으로 배열을 생성한뒤
메세지에 저장하고 리턴절에서 

대화명이나 로그인된 아이디값을
메세지의 글쓴이와 비교한뒤
내가보낸 메세지면 우측정렬
다른사람이 보낸 메세지는 좌측정렬을하도록 설정하엿습니다.

자료게시판과 마찬가지로
자료의 보임을 구현하였습니다.
자료가 더 잘보이기 위해
텍스트와 같이 작성하여 보낼시
자료가 한줄위로 오고
텍스트는 밑줄에 오도록 설정하엿습니다.
텍스트 및 파일 작성은 게시글과 비슷하게 구현하였고
엔터키누름을 감지하는 함수를 만들어 엔터키 누르면
자동으로 보내지는 기능도 구현하였습니다.
채팅으로 보낸 파일들또한 스토리지에
챗파일스 채팅방명 파일이름으로 저장되게 하였습니다. 갖고올땐
메세지를 저장할때 포함했던 url로 가져오도록 설계하였습니다.



혹시 궁금한 사항 있으실까요?
이상으로 발표를 마치겠습니다.
